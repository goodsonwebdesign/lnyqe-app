name: LNYQE CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Test
      run: npm run ci:test

    - name: Build
      run: npm run ci:build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  build-docker-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWSACCESSKEYID }}
        aws-secret-access-key: ${{ secrets.AWSSECRETACCESSKEY }}
        aws-region: ${{ secrets.AWSREGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECRREPOSITORY }}:latest
          ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECRREPOSITORY }}:${{ github.sha }}

  deploy-to-aws:
    needs: build-docker-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWSACCESSKEYID }}
        aws-secret-access-key: ${{ secrets.AWSSECRETACCESSKEY }}
        aws-region: ${{ secrets.AWSREGION }}

    # Update ECS service with explicit subnet and security group IDs
    - name: Update ECS service
      run: |
        aws ecs update-service --cluster ${{ secrets.ECSCLUSTER }} \
                              --service ${{ secrets.ECSSERVICE }} \
                              --network-configuration "awsvpcConfiguration={subnets=['subnet-xxxxx','subnet-yyyyy'],securityGroups=['sg-zzzzz'],assignPublicIp=ENABLED}" \
                              --force-new-deployment

    # For deployment status check with timeout
    - name: Wait for service to stabilize
      id: wait-for-deployment
      run: |
        echo "Waiting for ECS service to stabilize (timeout after 5 minutes)..."
        timeout 300 aws ecs wait services-stable \
          --cluster ${{ secrets.ECSCLUSTER }} \
          --services ${{ secrets.ECSSERVICE }} || ec=$?
        
        if [ ${ec:-0} -eq 124 ]; then
          echo "Timeout reached while waiting for service to stabilize"
          
          # Get service status for debugging
          aws ecs describe-services \
            --cluster ${{ secrets.ECSCLUSTER }} \
            --services ${{ secrets.ECSSERVICE }}
          
          echo "::warning::ECS service did not stabilize within the timeout period. You may need to check the ECS console for errors."
          exit 1
        elif [ ${ec:-0} -ne 0 ]; then
          echo "Error occurred while waiting for service to stabilize"
          exit $ec
        fi
        
        echo "ECS service has stabilized successfully!"
