name: LNYQE CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Test
      run: npm run ci:test

    - name: Build
      run: npm run ci:build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  build-docker-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWSACCESSKEYID }}
        aws-secret-access-key: ${{ secrets.AWSSECRETACCESSKEY }}
        aws-region: ${{ secrets.AWSREGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECRREPOSITORY }}:latest
          ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECRREPOSITORY }}:${{ github.sha }}

  deploy-to-aws:
    needs: build-docker-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWSACCESSKEYID }}
        aws-secret-access-key: ${{ secrets.AWSSECRETACCESSKEY }}
        aws-region: ${{ secrets.AWSREGION }}

    # Check ECS service status before updating
    - name: Check ECS service status
      id: check-service
      run: |
        echo "Checking current ECS service status..."
        aws ecs describe-services \
          --cluster ${{ secrets.ECSCLUSTER }} \
          --services ${{ secrets.ECSSERVICE }} > service_status.json
        
        cat service_status.json
        
        # Check if service is already being deployed
        pending_count=$(jq '.services[0].deployments | length' service_status.json)
        if [ $pending_count -gt 1 ]; then
          echo "::warning::There is already a deployment in progress. Waiting before attempting new deployment."
          sleep 60
        fi

    # Update ECS service with retries and exponential backoff
    - name: Update ECS service
      id: update-service
      run: |
        # Using actual subnet and security group values
        max_attempts=5
        attempt=1
        backoff_seconds=30
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts to update ECS service..."
          
          if aws ecs update-service \
            --cluster ${{ secrets.ECSCLUSTER }} \
            --service ${{ secrets.ECSSERVICE }} \
            --network-configuration "awsvpcConfiguration={subnets=['subnet-06f217639afe889bb','subnet-0f56cdbfc696f03a8'],securityGroups=['sg-060182ba59dbd20e1'],assignPublicIp=ENABLED}" \
            --force-new-deployment; then
              echo "ECS service update initiated successfully!"
              break
          else
            exit_code=$?
            echo "Update failed with exit code: $exit_code"
            
            if [ $attempt -lt $max_attempts ]; then
              echo "Waiting ${backoff_seconds} seconds before retry..."
              sleep $backoff_seconds
              # Exponential backoff with jitter
              backoff_seconds=$(( backoff_seconds * 2 + (RANDOM % 10) ))
            else
              echo "::error::Failed to update ECS service after $max_attempts attempts."
              exit 1
            fi
          fi
          
          attempt=$((attempt + 1))
        done

    # For deployment status check with timeout and retries
    - name: Wait for service to stabilize
      id: wait-for-deployment
      timeout-minutes: 15
      run: |
        echo "Waiting for ECS service to stabilize (timeout after 15 minutes)..."
        
        max_checks=30
        check=1
        wait_time=30
        deployment_failed=false
        
        while [ $check -le $max_checks ]; do
          echo "Check $check of $max_checks: Verifying service stability..."
          
          # Get detailed service status
          aws ecs describe-services \
            --cluster ${{ secrets.ECSCLUSTER }} \
            --services ${{ secrets.ECSSERVICE }} > current_status.json
            
          # Check for failed deployments
          deployment_status=$(jq -r '.services[0].deployments[0].status' current_status.json)
          running_count=$(jq -r '.services[0].deployments[0].runningCount' current_status.json)
          desired_count=$(jq -r '.services[0].deployments[0].desiredCount' current_status.json)
          
          echo "Deployment status: $deployment_status, Running: $running_count, Desired: $desired_count"
          
          # Check for any failed tasks
          failed_tasks=$(jq -r '.services[0].failures | length' current_status.json)
          if [ "$failed_tasks" -gt 0 ] || [ "$deployment_status" = "FAILED" ]; then
            echo "::error::Deployment failed. Found $failed_tasks failed tasks."
            jq '.services[0].failures' current_status.json
            deployment_failed=true
            break
          fi
          
          # Check if deployment is stable
          if [ "$running_count" -eq "$desired_count" ] && [ "$desired_count" -gt 0 ]; then
            # Use the wait command as an additional verification
            if aws ecs wait services-stable \
              --cluster ${{ secrets.ECSCLUSTER }} \
              --services ${{ secrets.ECSSERVICE }}; then
                echo "ECS service has stabilized successfully!"
                # Verify the service is actually responding
                echo "Deployment completed successfully!"
                exit 0
            fi
          fi
          
          if [ $check -lt $max_checks ]; then
            echo "Waiting ${wait_time} seconds before checking again..."
            sleep $wait_time
          else
            echo "::warning::ECS service did not stabilize within allowed time."
            deployment_failed=true
          fi
          
          check=$((check + 1))
        done
        
        if [ "$deployment_failed" = true ]; then
          echo "::error::Deployment failed to stabilize. Please check ECS console for details."
          exit 1
        fi
