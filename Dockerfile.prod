FROM node:20-alpine as builder

WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy the rest of the code
COPY . .

# Add a build timestamp to ensure builds reflect the latest changes
ARG BUILD_DATE=unknown
ENV BUILD_DATE=${BUILD_DATE}
RUN echo "Build date: $BUILD_DATE" > build-info.txt

# Add version.js with timestamp to force cache busting
RUN echo "window.APP_VERSION = '${BUILD_DATE}';" > src/version.js

# Build the application
RUN npm run build -- --configuration production

# Stage 2: Setup nginx to serve the application
FROM nginx:alpine

# Configure nginx logging for AWS
RUN mkdir -p /var/log/nginx && \
    ln -sf /dev/stdout /var/log/nginx/access.log && \
    ln -sf /dev/stderr /var/log/nginx/error.log

# Copy the build output from builder stage
COPY --from=builder /app/dist/lnyqe-app/browser /usr/share/nginx/html
COPY --from=builder /app/build-info.txt /usr/share/nginx/html/build-info.txt
COPY --from=builder /app/src/version.js /usr/share/nginx/html/version.js

# Copy custom nginx config
COPY ./nginx.conf /etc/nginx/conf.d/default.conf

# Create a simpler main config
RUN echo 'events { worker_connections 1024; }' > /etc/nginx/nginx.conf && \
    echo 'http { include /etc/nginx/conf.d/*.conf; }' >> /etc/nginx/nginx.conf

# Install curl for health checks
RUN apk add --no-cache curl

# Expose port 80
EXPOSE 80

# Add a health check to the container
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 CMD curl --fail http://localhost/health || exit 1

# Start nginx server
CMD ["nginx", "-g", "daemon off;"]
