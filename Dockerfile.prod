FROM node:20-alpine as builder

WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy the rest of the code
COPY . .

# Build the application
RUN npm run build -- --configuration production

# Stage 2: Setup nginx to serve the application
FROM nginx:alpine

# Configure nginx logging for AWS
RUN mkdir -p /var/log/nginx && \
    ln -sf /dev/stdout /var/log/nginx/access.log && \
    ln -sf /dev/stderr /var/log/nginx/error.log

# Copy the build output from builder stage
COPY --from=builder /app/dist/lnyqe-app/browser /usr/share/nginx/html

# Copy custom nginx config
COPY ./nginx.conf /etc/nginx/conf.d/default.conf

# Create a basic config with logging format 
RUN echo 'http { \
    log_format main '"'"'$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"'"'"'; \
    include /etc/nginx/conf.d/*.conf; \
}' > /etc/nginx/nginx.conf && \
    echo 'events { worker_connections 1024; }' >> /etc/nginx/nginx.conf && \
    cat /etc/nginx/nginx.conf

# Expose port 80
EXPOSE 80

# Add a health check to the container
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 CMD curl --fail http://localhost/health || exit 1

# Start nginx server
CMD ["nginx", "-g", "daemon off;"]
