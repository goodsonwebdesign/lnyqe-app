server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Basic logging
    access_log /dev/stdout;
    error_log /dev/stderr warn;

    # Enhanced health check endpoints
    location = /health {
        access_log off;
        add_header Content-Type text/plain;
        add_header Cache-Control "no-cache";
        add_header X-Health-Status "OK";
        add_header X-Container-ID "${HOSTNAME}";
        return 200 "OK";
    }

    location = /health-check {
        access_log off;
        add_header Content-Type text/plain;
        add_header Cache-Control "no-cache";
        add_header X-Health-Status "OK";
        add_header X-Container-ID "${HOSTNAME}";
        return 200 "OK";
    }

    # Specific handler for ALB health check
    location = /assets/health.json {
        access_log off;
        add_header Content-Type application/json;
        add_header Cache-Control "no-cache";
        add_header X-Health-Status "OK";
        try_files $uri /assets/health.json =200;
    }

    # Proxy API requests to your Go backend
    location /api/ {
        proxy_pass http://lynqe-api-prod-1529662606.us-east-2.elb.amazonaws.com/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_hide_header X-Powered-By;
    }

    # MIME type configuration - using include to ensure proper defaults are loaded
    include mime.types;

    # Explicitly set JavaScript MIME types
    types {
        application/javascript js mjs;
    }
    default_type application/octet-stream;

    # JavaScript files handling - explicitly set correct MIME type
    location ~* \.js$ {
        types { application/javascript js; }
        default_type application/javascript;
        add_header Content-Type application/javascript;
        add_header X-Content-Type-Options nosniff;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        expires 0;
    }

    # Module JavaScript files handling
    location ~* \.mjs$ {
        types { application/javascript mjs; }
        default_type application/javascript;
        add_header Content-Type application/javascript;
        add_header X-Content-Type-Options nosniff;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        expires 0;
    }

    # HTML files - no caching
    location ~* \.(html)$ {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma no-cache;
        add_header Expires 0;
        expires 0;
    }

    # Static assets
    location ~* \.(jpg|jpeg|png|gif|ico|css)$ {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        expires 0;
    }

    # JSON files - ensure proper content type for health checks
    location ~* \.json$ {
        add_header Content-Type application/json;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma no-cache;
        add_header Expires 0;
        expires 0;
    }

    # Handle build-info.txt specially - always return fresh content
    location = /build-info.txt {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma no-cache;
        add_header Expires 0;
        expires 0;
    }

    # Handle favicon
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    # Angular routing - make sure not to intercept .js files
    location / {
        try_files $uri $uri/ /index.html;
    }
}
