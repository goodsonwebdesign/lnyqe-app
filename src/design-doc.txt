LNYQE Application Development Guide

I'm working on the LNYQE Angular application that follows specific architectural and design principles. When suggesting code or solutions, please adhere to these guidelines:

ARCHITECTURE:
- Maintain a strict mobile first design process
- Maintain strict feature-based modularity with standalone components
- Follow the core/features/shared/layouts folder structure
- Keep business logic in dedicated services, UI logic in components
- Ensure NgRx store handles all global state with proper actions, reducers, effects and selectors

STYLING:
- Use TailwindCSS exclusively with the established neutral/primary color scheme
- Maintain dark mode support using dark: variant consistently on all elements
- Follow mobile-first responsive design patterns
- Use the established max-w-* classes for consistent container widths
- Adhere to the established spacing system (margin and padding scales)
- Ensure all interactive elements have proper hover, focus, and active states

COMPONENTS:
- Make components fully reusable and configurable through inputs/outputs
- Follow the established naming conventions: [feature]-[component-name]
- Ensure components support both light and dark themes
- Use the shared UI component library whenever possible
- Implement proper accessibility attributes (ARIA) on all components

PERFORMANCE:
- Optimize for First Contentful Paint and Time to Interactive
- Implement proper change detection strategies
- Use OnPush change detection where appropriate
- Avoid unnecessary re-renders and computations
- Lazy load all feature modules
- Keep bundle sizes minimal

SECURITY:
- Implement proper authentication guards on protected routes
- Validate all user inputs
- Use Angular's built-in XSS protection
- Follow OWASP security best practices
- Never store sensitive information in local storage

USER EXPERIENCE:
- Ensure intuitive navigation patterns
- Provide clear feedback for all user actions
- Implement smooth transitions between states
- Design for progressive disclosure of complex features
- Support keyboard navigation throughout the application
- Ensure proper error states and recovery paths

CONSISTENCY:
- Follow established patterns for forms, tables, and lists
- Use the same animation timing and easing for similar interactions
- Maintain consistent typography scales and font weights
- Ensure logical tab order for keyboard navigation
- Use identical patterns for loading states and error handling

CLEAN UP:
- Remove any "dead" or unused code you come across (Please verify it is not used before removing it, we do not want to break the application)
- Remove console logs that were for testing purposes
- Ensure proper memory leak prevention is in place for services, observables etc...
- Ensure code is properly documented as you come across it for maintainability


When suggesting changes or new features, optimize for performance, security, and user experience while maintaining visual and functional consistency across the application.
